{"version":3,"sources":["components/CellComp/CellComp.tsx","components/FieldComp/FieldComp.tsx","components/MenuComp/MenuComp.tsx","components/GameComp/GameComp.tsx","reportWebVitals.ts","stores/Cell.ts","stores/Row.ts","stores/Field.ts","stores/GameStore.ts","index.tsx"],"names":["CellComp","props","className","isActive","onClick","FieldComp","observer","game","useContext","StoresContext","field","rows","map","row","rowIdx","cells","cell","cellIdx","active","onCellClick","MenuComp","isArrowEvent","evt","key","startsWith","stepsAmount","rowAmount","colAmount","type","min","max","step","value","onChange","onRowAmount","target","valueAsNumber","setColAmount","onMouseDown","onColCtrlDown","onMouseUp","onColCtrlUp","onKeyDown","onKeyUp","checked","flipTargetCell","onFlipTargetCell","onRandomize","window","alert","GameComp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Cell","makeObservable","this","observable","Math","random","action","Row","Field","init","lo","Array","invertCellState","every","length","invert","GameStore","v","invertAreaState","isWin","prevColAmount","configure","enforceActions","computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","disableErrorBoundaries","rootStore","React","createContext","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.125dde7f.chunk.js","sourcesContent":["import 'components/CellComp/CellComp.scoped.scss';\n\ninterface Props {\n  isActive: boolean;\n  onClick: (cellIdx?: number, rowIdx?: number) => void;\n}\n\nexport function CellComp(props: Props) {\n  return (\n    <button\n      className={`CellComp ${props.isActive ? 'active' : ''}`}\n      onClick={() => {\n        props.onClick();\n      }}\n    />\n  );\n};\n","import { CellComp } from 'components/CellComp/CellComp';\nimport 'components/FieldComp/FieldComp.scoped.scss';\nimport { StoresContext } from 'index';\nimport { observer } from 'mobx-react-lite';\nimport { useContext } from 'react';\n\nexport const FieldComp = observer(function FieldComp() {\n  const game = useContext(StoresContext).game;\n\n  return (\n    <div className='FieldComp'>\n      <table>\n        <tbody>{renderRows()}</tbody>\n      </table>\n    </div>\n  );\n\n  function renderRows(): JSX.Element[] {\n    return game.field.rows.map((row, rowIdx) => {\n      return (\n        <tr key={'tr' + rowIdx}>\n          {row.cells.map((cell, cellIdx) => {\n            return (\n              <td key={'td' + cellIdx + rowIdx}>\n                <CellComp\n                  key={'cell' + cellIdx + rowIdx}\n                  isActive={cell.active}\n                  onClick={() => {\n                    game.onCellClick(cellIdx, rowIdx);\n                  }}\n                />\n              </td>\n            );\n          })}\n        </tr>\n      );\n    });\n  }\n});\n","import 'components/MenuComp/MenuComp.scoped.scss';\nimport { StoresContext } from 'index';\nimport { observer } from 'mobx-react-lite';\nimport { useContext } from 'react';\n\nexport const MenuComp = observer(function MenuComp() {\n  const game = useContext(StoresContext).game;\n\n  function showAbout() {\n    window.alert(\n      'Small puzzle game.\\n' +\n        'To win, mark all cells green.\\n' +\n        'Click on the cell will invert colors of all neighbors except for diagonals.'\n    );\n  }\n\n  function isArrowEvent(evt: React.KeyboardEvent) {\n    return evt.key.startsWith('Arrow');\n  }\n\n  return (\n    <div className='MenuComp'>\n      <div>\n        <p>steps counter: {game.stepsAmount}</p>\n      </div>\n\n      <div>\n        <p>\n          field size: {game.rowAmount} x {game.colAmount}\n        </p>\n        <label>\n          rows:\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"9\"\n            step=\"1\"\n            value={game.rowAmount}\n            onChange={(evt) => {\n              game.onRowAmount(evt.target.valueAsNumber);\n            }}\n          />\n        </label>\n        <label>\n          columns:\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"9\"\n            step=\"1\"\n            value={game.colAmount}\n            onChange={(evt) => {\n              game.setColAmount(evt.target.valueAsNumber);\n            }}\n            onMouseDown={() => {\n              game.onColCtrlDown();\n            }}\n            onMouseUp={() => {\n              game.onColCtrlUp();\n            }}\n            onKeyDown={(evt) => {\n              if (isArrowEvent(evt)) {\n                game.onColCtrlDown();\n              }\n            }}\n            onKeyUp={(evt) => {\n              if (isArrowEvent(evt)) {\n                game.onColCtrlUp();\n              }\n            }}\n          />\n        </label>\n      </div>\n\n      <div>\n        <label>\n          change clicked cell:\n          <input\n            type=\"checkbox\"\n            checked={game.flipTargetCell}\n            onChange={(evt) => {\n              game.onFlipTargetCell(evt.target.checked);\n            }}\n          />\n        </label>\n      </div>\n\n      <div>\n        <button\n          onClick={() => {\n            game.onRandomize();\n          }}\n        >\n          randomize field\n        </button>\n      </div>\n\n      <div>\n        <button onClick={showAbout}>about</button>\n      </div>\n    </div>\n  );\n});\n","import { FieldComp } from 'components/FieldComp/FieldComp';\nimport 'components/GameComp/GameComp.scoped.scss';\nimport { MenuComp } from 'components/MenuComp/MenuComp';\n\nexport function GameComp() {\n  return (\n    <div className='GameComp'>\n      <FieldComp />\n      <MenuComp />\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { action, makeObservable, observable } from 'mobx';\n\nexport class Cell {\n  @observable active = Math.random() >= 0.5;\n\n  constructor() {\n    makeObservable(this);\n  }\n\n  @action\n  invert() {\n    this.active = !this.active;\n  }\n}\n","import { Cell } from 'stores/Cell';\n\nexport class Row {\n  cells: Cell[];\n\n  constructor(cells: Cell[]) {\n    this.cells = cells;\n  }\n}\n","import lo from 'lodash';\nimport { action, makeObservable, observable } from 'mobx';\nimport { Cell } from 'stores/Cell';\nimport { Row } from 'stores/Row';\n\nexport class Field {\n  @observable rows: Row[] = [];\n\n  constructor(colAmount: number, rowAmount: number) {\n    makeObservable(this);\n    this.init(colAmount, rowAmount);\n  }\n\n  @action\n  init(colAmount: number, rowAmount: number) {\n    this.rows = lo.map(Array(rowAmount), () => {\n      return new Row(\n        lo.map(Array(colAmount), () => {\n          return new Cell();\n        })\n      );\n    });\n  }\n\n  @action\n  invertAreaState(cellIdx: number, rowIdx: number, flipTargetCell: boolean) {\n    if (flipTargetCell) {\n      this.invertCellState(cellIdx, rowIdx);\n    }\n\n    this.invertCellState(cellIdx - 1, rowIdx);\n    this.invertCellState(cellIdx + 1, rowIdx);\n    this.invertCellState(cellIdx, rowIdx - 1);\n    this.invertCellState(cellIdx, rowIdx + 1);\n  }\n\n  isWin(): boolean {\n    return this.rows.every((row) => {\n      return row.cells.every((cell) => {\n        return cell.active;\n      });\n    });\n  }\n\n  @action\n  private invertCellState(cellIdx: number, rowIdx: number) {\n    if (\n      rowIdx >= 0 &&\n      cellIdx >= 0 &&\n      rowIdx < this.rows.length &&\n      cellIdx < this.rows[rowIdx].cells.length\n    ) {\n      this.rows[rowIdx].cells[cellIdx].invert();\n    }\n  }\n}\n","import { action, makeObservable, observable } from 'mobx';\nimport { Field } from 'stores/Field';\n\nexport class GameStore {\n  @observable prevColAmount = 0;\n  @observable colAmount = 6;\n  @observable rowAmount = 1;\n  @observable flipTargetCell = false;\n  @observable stepsAmount = 0;\n\n  field = new Field(this.colAmount, this.rowAmount);\n\n  constructor() {\n    makeObservable(this);\n  }\n\n  @action\n  setColAmount(v: number) {\n    this.colAmount = v;\n  }\n\n  @action\n  onCellClick(cellIdx: number, rowIdx: number) {\n    this.field.invertAreaState(cellIdx, rowIdx, this.flipTargetCell);\n    this.stepsAmount++;\n    if (this.field.isWin()) {\n      window.alert(`You won in ${this.stepsAmount} steps!`);\n      this.field.init(this.colAmount, this.rowAmount);\n      this.stepsAmount = 0;\n    }\n  }\n\n  @action\n  onRowAmount(v: number) {\n    this.rowAmount = v;\n    this.field.init(this.colAmount, this.rowAmount);\n    this.stepsAmount = 0;\n  }\n\n  @action\n  onFlipTargetCell(v: boolean) {\n    this.flipTargetCell = v;\n    this.field.init(this.colAmount, this.rowAmount);\n    this.stepsAmount = 0;\n  }\n\n  @action\n  onColCtrlDown() {\n    this.prevColAmount = this.colAmount;\n  }\n\n  @action\n  onColCtrlUp() {\n    if (this.colAmount === this.prevColAmount) {\n      return;\n    }\n    this.field.init(this.colAmount, this.rowAmount);\n    this.stepsAmount = 0;\n  }\n\n  @action\n  onRandomize() {\n    this.field.init(this.colAmount, this.rowAmount);\n    this.stepsAmount = 0;\n  }\n}\n","import { GameComp } from 'components/GameComp/GameComp';\nimport 'index.scss';\nimport { configure } from 'mobx';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from 'reportWebVitals';\nimport { GameStore } from 'stores/GameStore';\n\nconfigure({\n  enforceActions: 'always',\n  computedRequiresReaction: true,\n  reactionRequiresObservable: true,\n  observableRequiresReaction: true,\n  disableErrorBoundaries: true,\n});\n\nconst rootStore = {\n  game: new GameStore(),\n};\nexport const StoresContext = React.createContext(rootStore);\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoresContext.Provider value={rootStore}>\n      <GameComp />\n    </StoresContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}